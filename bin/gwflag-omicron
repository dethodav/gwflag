#!/usr/bin/env python
## coding=utf-8
## Copyright (C) Derek Davis (2017)
##
## This file is part of gwFlag.
##
## gwFlagis free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
##gwFlagis distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with gwFlag.  If not, see <http://www.gnu.org/licenses/>.

import os.path
import re
import warnings
from StringIO import StringIO

from gwdetchar import (cli, const, scattering, __version__)

import matplotlib
matplotlib.use('Agg')
from glue import segments
from trigfind import find_trigger_files
from gwpy.timeseries import TimeSeriesDict
from gwpy.segments import (DataQualityFlag, DataQualityDict,
                            Segment, SegmentList)
from gwpy.utils import gprint
import numpy

import ConfigParser
import sys

from gwflag import (core,vetconfig)

parser = cli.create_parser(description=__doc__)
cli.add_gps_start_stop_arguments(parser)
cli.add_ifo_option(parser)
parser.add_argument('-c', '--main-channel',
                    default='%s:GDS-CALIB_STRAIN' % const.IFO,
                    help='name of main (h(t)) channel, default: %(default)s')
parser.add_argument('-t', '--threshold', nargs='+', default=100.,
                    help='threshold, or list of thresholds, to produce flags with, '
                         ' (unit depends on method and channel choice)')
parser.add_argument('-e', '--threshold-multiplier', type=int, default=0,
                    help='power of 10 for threshold, '
                         'default: 0')
parser.add_argument('-a', '--state-flag', metavar='FLAG',
                    default='%s:DMT-ANALYSIS_READY:1' % const.IFO,
                    help='restrict search to times when FLAG was active')
parser.add_argument('-o', '--output-dir', type=os.path.abspath,
                    default=os.curdir,
                    help='output directory for analysis, default: %(default)s')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='print verbose output, default: %(default)s')
args = parser.parse_args()

if len(args.threshold) == 1:
    try:  # try converting to GPS
        args.threshold = [float(args.threshold[0])]
    except (TypeError, ValueError):  # otherwise read as file
        import numpy
        args.threshold = numpy.loadtxt(args.threshold[0], dtype=float)
else:
    args.threshold = map(float, args.threshold)

chanstr = str(args.main_channel).replace(':', '_')
gpsstr = '%s-%s' % (int(args.gpsstart), int(args.gpsend-args.gpsstart))


for k in range(0,len(args.threshold)):
    if args.threshold[k].is_integer():
        args.threshold[k] = int(args.threshold[k])

if not os.path.isdir(args.output_dir):
    os.makedirs(args.output_dir)
os.chdir(args.output_dir)


segxml = '%s-FLAG_SEGMENTS-%s.xml.gz' % (chanstr, gpsstr)
xmlpath = os.path.join(args.output_dir,segxml)
#=====================================================

#statea = ImportSegments(args)

files = find_trigger_files(args.main_channel, 'omicron',int(args.gpsstart),int(args.gpsend))
events = EventTable.read(files, format='ligolw.sngl_burst')
flag_segments = DataQualityDict((m, []) for m in args.threshold)
iniparser = ConfigParser.SafeConfigParser()
configinit(iniparser,snr=['8','20','100'])

if args.verbose:
    gprint("Checking all thresholds... 0/%d thresholds checked" % len(thresh), end='\r')

for i  in range(0,len(thresh)):
    time = []
    loud = events['snr'] > int(args.threshold[i])
    loud_events = events[loud]
    event_times = loud_events['peak_time']
    for z in event_times:
        time.append(z)

    FlagWrite(args,time,flag_segments)
    configflagtab(iniparser,args.threshold[i],args.ifo,args.main_channel,xmlpath)
    if args.verbose:
           gprint("Checking all thresholds... %d/%d thresholds checked"
              % (i+1, len(thresh)), end='\r')
if args.verbose:
    gprint("Checking all thresholds... {0}/{0} thresholds checked".format(len(thresh)))

print('writing xml')

flag_segments.write(segxml,overwrite=True)


iniparser.write(sys.stdout)






